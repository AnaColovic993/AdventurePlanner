// <auto-generated />
using System;
using Adventure.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Adventure.Repository.Migrations
{
    [DbContext(typeof(AdventureDbContext))]
    partial class AdventureDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Adventure.Repository.Models.AdventureDetail", b =>
                {
                    b.Property<int>("AdventureDetailId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdventureName");

                    b.Property<int>("AdventureTypeId");

                    b.Property<string>("Description");

                    b.Property<double>("PricePerDay");

                    b.HasKey("AdventureDetailId");

                    b.HasIndex("AdventureTypeId");

                    b.ToTable("AdventureDetails");
                });

            modelBuilder.Entity("Adventure.Repository.Models.AdventureType", b =>
                {
                    b.Property<int>("AdventureTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdventureTypeName");

                    b.HasKey("AdventureTypeId");

                    b.ToTable("AdventureTypes");
                });

            modelBuilder.Entity("Adventure.Repository.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer");

                    b.Property<string>("AskQuestion");

                    b.Property<int>("UserId");

                    b.HasKey("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Adventure.Repository.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Adventure.Repository.Models.UserAdventure", b =>
                {
                    b.Property<int>("AdventureDetailId");

                    b.Property<int>("UserId");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.Property<double>("PriceCalculated");

                    b.HasKey("AdventureDetailId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAdventure");
                });

            modelBuilder.Entity("Adventure.Repository.Models.AdventureDetail", b =>
                {
                    b.HasOne("Adventure.Repository.Models.AdventureType", "AdventureType")
                        .WithMany("AdventureDetails")
                        .HasForeignKey("AdventureTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Adventure.Repository.Models.Question", b =>
                {
                    b.HasOne("Adventure.Repository.Models.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Adventure.Repository.Models.UserAdventure", b =>
                {
                    b.HasOne("Adventure.Repository.Models.AdventureDetail", "AdventureDetail")
                        .WithMany("UserAdventures")
                        .HasForeignKey("AdventureDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Adventure.Repository.Models.User", "User")
                        .WithMany("UserAdventures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
